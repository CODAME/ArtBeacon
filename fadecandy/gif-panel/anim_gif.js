#!/usr/bin/env node


var fs = require('fs')
  , gm = require('gm')
  , PNG = require('pngjs').PNG
  , async = require('async')
  , opts = require("nomnom").parse()
  , TMP_DIR = "./tmp";


var OPC = new require('./opc')
var client = new OPC('192.168.2.1', 7890);



console.log(opts);
try {
	var files = fs.readdirSync(TMP_DIR);
	files.forEach(function(f) {
		fs.unlink(TMP_DIR + '/' + f);
	})
	fs.rmdirSync(TMP_DIR);
}
catch (err) {}
fs.mkdirSync(TMP_DIR);

var imageMagick = gm.subClass({ imageMagick: true });

var pixels = [];


var gifName = opts['0'] || './codame.gif';

imageMagick(gifName).resize(16, 32, "!").write(TMP_DIR + '/frames.png', function(e) {
	var files = fs.readdirSync(TMP_DIR);

	async.each(files, function(file, next) {
		if (file.indexOf('.png') === -1) {
			return next();
		}
		console.log("creating stream for " + file);
		fs.createReadStream(TMP_DIR + '/' + file)
		    .pipe(new PNG({
		        filterType: 4
		    }))
		    .on('parsed', function() {
		    	var px = []
		        for (var y = 0; y < this.height; y++) {
		            for (var x = 0; x < this.width; x++) {
		                var idx = (this.width * y + x) << 2;
		                px.push([this.data[idx], this.data[idx+1], this.data[idx+2]])

		            }
		        }
		        images.push(px);
		        next();
		    });

	}, function(err) {
		start(images);
	});

});

var counter = 0;
var images = [];

var frameDelay = parseInt(opts['1'], 10) || 200;

gm(gifName).identify( function(err, data) {
	frameDelay = parseInt(data.Delay, 10);
	// console.log(data);
});











var imgData = [
[29,0,27], [28,0,26], [29,0,28], [26,0,24], [26,0,24], [28,0,26], [26,0,25], [23,0,22], [25,0,24], [25,0,24], [23,0,21], [23,0,21], [20,0,20], [26,0,24], [23,0,22], [22,0,20],

[31,0,30], [24,0,23], [23,0,22], [26,0,25], [28,0,27], [24,0,23], [26,0,25], [26,0,25], [26,0,24], [23,0,22], [25,0,24], [23,0,22], [22,0,21], [25,0,24], [22,0,21], [22,0,21],

[25,0,24], [24,0,23], [28,0,27], [26,0,25], [29,0,28], [25,0,24], [27,0,25], [24,0,23], [26,0,25], [22,0,21], [27,0,26], [25,0,24], [23,0,22], [24,0,23], [26,0,24], [27,0,25],

[29,0,28], [26,0,25], [27,0,25], [26,0,25], [28,0,26], [28,0,26], [27,0,25], [25,0,24], [27,0,25], [28,0,27], [29,0,27], [31,0,29], [24,0,23], [24,0,23], [26,0,24], [28,0,26],

[26,0,25], [29,0,29], [29,0,27], [30,0,28], [32,0,30], [29,0,27], [30,0,28], [28,0,27], [29,0,27], [29,0,27], [28,0,26], [25,0,23], [30,0,28], [27,0,26], [26,0,25], [29,0,27],

[28,0,26], [31,0,29], [31,0,29], [28,0,26], [30,0,28], [29,0,27], [28,0,26], [29,0,28], [31,0,29], [29,0,27], [29,0,27], [23,0,22], [29,0,28], [32,0,30], [29,0,28], [30,0,29],

[32,0,31], [31,0,30], [34,0,32], [33,0,31], [31,0,30], [29,0,27], [31,0,28], [32,0,31], [31,0,30], [30,0,28], [30,0,28], [32,0,30], [30,0,28], [31,0,29], [34,0,32], [32,0,30],

[34,0,32], [35,0,34], [33,0,31], [32,0,30], [32,0,31], [31,0,29], [32,0,30], [30,0,29], [30,0,29], [31,0,29], [31,0,30], [37,0,36], [33,0,32], [31,0,29], [36,0,34], [37,0,35],

[34,0,33], [34,0,33], [38,0,36], [45,0,40], [38,0,33], [42,0,37], [49,0,43], [56,0,50], [58,0,51], [54,0,47], [49,0,43], [42,0,37], [41,0,38], [41,0,38], [37,0,36], [34,0,32],

[42,0,39], [54,0,48], [58,0,51], [82,13,76], [140,76,134], [162,114,159], [148,99,147], [147,91,144], [148,94,145], [163,113,160], [167,120,165], [136,71,131], [86,14,79], [51,0,45], [50,0,44], [42,0,38],

[80,9,74], [155,101,152], [220,194,220], [244,234,244], [247,236,247], [196,158,194], [116,53,111], [89,14,82], [88,17,82], [136,76,130], [209,180,208], [252,246,252], [243,232,243], [222,196,221], [156,102,153], [85,9,77],

[242,227,241], [255,250,255], [255,253,255], [246,235,246], [122,53,117], [61,0,53], [51,0,46], [47,0,43], [53,0,48], [56,0,50], [66,0,57], [163,111,159], [254,249,254], [255,253,255], [255,250,255], [242,229,242],

[255,251,255], [255,250,255], [253,247,253], [142,77,137], [65,0,56], [57,0,53], [47,0,44], [46,0,44], [46,0,44], [44,0,42], [41,0,39], [58,0,50], [183,137,181], [254,250,254], [255,250,255], [255,252,255],

[255,251,255], [255,252,255], [225,200,224], [65,0,58], [49,0,46], [48,0,45], [51,0,48], [49,0,46], [47,0,45], [45,0,42], [46,0,44], [55,0,50], [87,9,79], [245,233,245], [255,252,255], [255,251,255],

[255,251,255], [255,253,255], [172,126,170], [58,0,52], [48,0,46], [46,0,43], [52,0,49], [49,0,46], [50,0,47], [47,0,45], [49,0,46], [54,0,51], [67,0,59], [217,189,215], [255,253,255], [255,251,255],

[255,251,254], [255,253,255], [164,110,160], [53,0,47], [49,0,46], [48,0,45], [49,0,45], [46,0,44], [47,0,44], [47,0,44], [47,0,44], [50,0,48], [60,0,53], [196,160,194], [255,253,255], [255,252,255],

[254,251,254], [255,253,255], [179,136,176], [57,0,51], [52,0,49], [52,0,49], [48,0,45], [45,0,43], [49,0,47], [50,0,47], [50,0,48], [48,0,45], [72,0,64], [218,191,217], [255,253,255], [255,252,255],

[253,249,252], [254,251,254], [230,209,229], [76,0,67], [46,0,43], [49,0,46], [51,0,48], [52,0,49], [49,0,47], [46,0,43], [50,0,47], [50,0,46], [90,16,83], [247,235,246], [255,252,255], [255,251,255],

[250,245,250], [250,245,250], [250,244,250], [159,102,155], [56,0,49], [49,0,45], [45,0,43], [48,0,46], [50,0,47], [47,0,45], [54,0,50], [67,0,58], [190,149,187], [255,252,255], [255,250,255], [255,250,255],

[245,239,245], [248,242,248], [249,244,249], [243,234,243], [142,86,138], [63,0,55], [52,0,46], [56,0,51], [45,0,42], [52,0,46], [75,0,65], [176,125,172], [253,248,253], [255,251,255], [255,252,255], [255,250,255],

[135,81,131], [200,174,198], [230,218,229], [244,239,244], [242,235,242], [195,166,194], [136,77,131], [114,46,108], [118,52,113], [157,100,153], [228,206,228], [255,252,255], [255,252,255], [248,238,248], [222,197,221], [155,97,150],

[50,0,45], [66,0,58], [91,25,86], [139,89,136], [169,133,167], [204,181,202], [215,197,214], [203,180,202], [213,188,211], [237,218,236], [229,208,228], [194,161,194], [165,111,161], [103,29,96], [62,0,55], [55,0,48],

[37,0,35], [40,0,37], [42,0,39], [46,0,41], [52,0,47], [55,0,50], [66,0,59], [77,2,70], [76,2,69], [71,0,64], [74,0,66], [65,0,58], [53,0,47], [54,1,49], [47,2,44], [40,1,38],

[35,0,33], [32,0,30], [38,0,35], [37,0,34], [38,0,37], [33,0,31], [36,0,33], [41,0,38], [46,0,43], [47,0,44], [47,0,44], [56,4,52], [46,8,44], [47,5,45], [42,3,40], [42,3,40],

[31,0,29], [32,0,30], [34,0,32], [35,0,33], [34,0,32], [33,0,31], [35,0,33], [39,0,36], [41,0,39], [44,0,41], [43,0,40], [52,0,49], [53,4,50], [50,10,48], [44,10,41], [41,7,39],

[26,0,24], [28,0,26], [28,0,27], [29,0,27], [28,0,27], [32,0,30], [35,0,33], [34,0,33], [37,0,35], [41,0,39], [40,0,38], [46,0,44], [52,0,49], [59,2,54], [58,9,56], [50,14,48],

[26,0,24], [22,0,21], [25,0,23], [29,0,28], [28,0,26], [28,0,26], [34,0,32], [34,0,32], [36,0,34], [40,0,38], [39,0,37], [44,0,41], [43,0,40], [49,0,45], [56,0,50], [65,6,60],

[21,0,20], [22,0,20], [24,0,23], [24,0,23], [27,0,26], [27,0,25], [26,0,24], [28,0,27], [34,0,32], [38,0,36], [39,0,37], [36,0,34], [45,0,42], [43,0,40], [46,0,42], [52,0,47],

[20,0,19], [23,0,21], [25,0,24], [28,0,26], [24,0,22], [26,0,25], [30,0,28], [27,0,25], [35,0,33], [37,0,35], [38,0,36], [35,0,33], [40,0,38], [42,0,40], [46,0,43], [43,0,40],

[23,0,22], [22,0,21], [21,0,19], [23,0,22], [26,1,24], [26,0,25], [27,0,25], [28,0,26], [32,0,30], [28,0,26], [32,0,31], [33,0,32], [34,0,32], [38,0,36], [38,0,35], [38,0,36],

[22,0,21], [22,0,21], [22,0,21], [24,0,23], [21,0,20], [25,0,23], [26,0,24], [26,0,24], [24,0,23], [26,0,25], [34,0,32], [35,0,32], [32,0,30], [37,0,34], [35,0,33], [41,0,38],

[21,0,20], [21,0,19], [22,0,21], [22,0,21], [21,0,20], [27,0,25], [24,0,23], [25,0,23], [26,0,24], [27,0,26], [27,0,25], [29,0,27], [31,0,29], [39,0,37], [36,0,34], [39,0,36]
 ];
 
 panelOffsetMap = [
   [256, 0],
   [320, 64],
   [384, 128],
   [448, 192]
 ];
 panelIndexMap = [
    [63,48,47,32,31,16,15, 0],
    [62,49,46,33,30,17,14, 1],
    [61,50,45,34,29,18,13, 2],
    [60,51,44,35,28,19,12, 3],
    [59,52,43,36,27,20,11, 4],
    [58,53,42,37,26,21,10, 5],
    [57,54,41,38,25,22, 9, 6],
    [56,55,40,39,24,23, 8, 7]
 ];
 

 var imgCoordinateMap = [];
 for (var y = 0; y < 32; y++) {
   for (var x = 0; x < 16; x++) {
     var i = x + (y * 16);
     var panelOffset = panelOffsetMap[Math.floor(y/8)][Math.floor(x/8)];
     var panelIndex = panelIndexMap[y%8][x%8];
     imgCoordinateMap[i] = panelOffset + panelIndex;
   }
 }
 
 var brightness = 0.3;
 
var textXOffset = 0;
function draw(data) {
    var millis = new Date().getTime();

    for (var pixel = 0; pixel < 512; pixel++)
    {
        var x = pixel % 16,
            y = Math.floor(pixel / 16);
            
        var red =   data[pixel][0],
            green = data[pixel][1],
            blue =  data[pixel][2];

        client.setPixel(imgCoordinateMap[pixel], red * brightness, green * brightness, blue * brightness);
    }
    client.writePixels();
    
}

imgData = pixels;


function start(images, framerate) {
	// console.log(images[0]);
	var frame = 0;
	var px = images[0];
	var framesPerSecond = 10;
	setInterval(function() {
		draw(px);
	}, 1000/framesPerSecond);

	setInterval(function() {
		frame++;
		if (frame >= images.length) {
			frame = 0;
		}
		px = images[frame];
	}, frameDelay);


}
